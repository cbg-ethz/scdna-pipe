import glob
import os
from pathlib import Path
from secondary_analysis import SecondaryAnalysis

fastqs_path = config['fastqs_path']
analysis_path = config['analysis_path']
cellranger_path = analysis_path + "/cellranger/"
scripts_dir = config['scripts_dir']
raw_fastqs = glob.glob(fastqs_path + "*.fastq.gz")
fastq_lanes = ["L001","L002","L003","L004"]
sample_name = config['sample_name']
cr_sample_name = sample_name[:-3]

def rename_fastq(s_name):
    '''
        renames the merged fastqs according to the bcl2fastq naming convention
        Sample input name: MERGED_BSSE_QGF_123456_ZXVN2SHG5_1_QWEERTY_T_scD_250c_r1v1_0_SI-GA-H5_S1_L003_I1_001.fastq.gz
    '''
    split_name = s_name.split('_')
    new_name = '_'.join(split_name[6:7]+split_name[-4:])
    return new_name


rule all:
    input:
        merged_fastqs = "merge_files_done.txt",
        rename_fastqs = "rename_fastqs_done.txt",
        tricked_fastqs = expand(fastqs_path+"/merged/tricked/" + sample_name + "_" + "{lane_no}" + "_R1_001.fastq.gz", lane_no = fastq_lanes),
        move_after_tricking_fastqs = "move_fastqs_to_tricked_done.txt",
        cellranger = "cellranger_done.txt"
    output:
        
    run:
        print("echo rule all")


rule merge_files:
    params:
        fastqs_path = fastqs_path,
	scripts_dir = scripts_dir
    input:
        raw_fastqs = expand('{sample}', sample=raw_fastqs)
    output:
        done = "merge_files_done.txt"
    shell:
        "sh {params.scripts_dir}/merge_10x_gzip_files.sh {params.fastqs_path}; \
	if [ -d {params.fastqs_path}/merged ] ; \
	then \
	    echo merged directory exists;\
	else \
	    mkdir {params.fastqs_path}/merged;\
	fi ; \
        mv {params.fastqs_path}/MERGED_BSSE* {params.fastqs_path}/merged;\
        chmod 755 {params.fastqs_path}/merged/*;\
	touch merge_files_done.txt"

rule rename_fastqs:
    input:
        rules.merge_files.output.done
    output:
        "rename_fastqs_done.txt"
    run:
        merged_fastqs_path = fastqs_path + "/merged/"
	print(merged_fastqs_path)
	fastqs_dir = merged_fastqs_path
	for filename in os.listdir(fastqs_dir):
    	    if filename.startswith("MERGED_BSSE") and filename.endswith('.gz'):
    	        print("old name: " + filename)
                print("new name: " + rename_fastq(filename))
                os.rename(fastqs_dir+filename, fastqs_dir+rename_fastq(filename))
        Path('rename_fastqs_done.txt').touch()

rule trick_fastqs:
    params:
        fastqs_path = fastqs_path,
        scripts_dir = scripts_dir,
        r1 = fastqs_path+"/merged/" + sample_name + "_" + "{lane_no}" + "_R1_001.fastq.gz",
        r2 = fastqs_path+"/merged/" + sample_name + "_" + "{lane_no}" + "_R2_001.fastq.gz",
        mem = config["tricking_fastqs"]["mem"],
        time = config["tricking_fastqs"]["time"] 
    input:
        rules.rename_fastqs.output
    output:
        fastqs_path+"/merged/tricked/" + sample_name + "_" + "{lane_no}" + "_R1_001.fastq.gz"
    shell:
        "\
        if [ -d {params.fastqs_path}/merged/tricked ] ; \
        then \
        echo tricked directory exists;\
        else \
        mkdir {params.fastqs_path}/merged/tricked;\
        fi ;\
        python {params.scripts_dir}/cellranger_dna_trick.py -r1 {params.r1}  -r2 {params.r2} -o {params.fastqs_path}/merged/tricked/"

rule move_fastqs:
    params:
        fastqs_path = fastqs_path
    input:
        tricked_fastqs = expand(fastqs_path+"/merged/tricked/" + sample_name + "_" + "{lane_no}" + "_R1_001.fastq.gz", lane_no = fastq_lanes)
    output:
        "move_fastqs_to_tricked_done.txt"
    shell:
        "mv {params.fastqs_path}/merged/*_R2_* {params.fastqs_path}/merged/tricked/; mv {params.fastqs_path}/merged/*_I1_* {params.fastqs_path}/merged/tricked/; chmod 755 {params.fastqs_path}/merged/tricked/*; touch move_fastqs_to_tricked_done.txt"

rule run_cellranger:
    params:
        fastqs_path = fastqs_path+'/merged/tricked',
        cr_sample_name = cr_sample_name,
        cellranger_path = cellranger_path,
        local_cores = config['cellranger_dna']['local_cores'],
        local_mem = config['cellranger_dna']['local_mem'],
        mem_per_core = config['cellranger_dna']['mem_per_core'],
        mem = config['cellranger_dna']['mem'],
        time = config['cellranger_dna']['time']
    input:
        moved_tricked_fastqs = expand(fastqs_path+"/merged/tricked/" + sample_name + "_" + "{lane_no}" + "_R1_001.fastq.gz", lane_no = fastq_lanes),
        move_after_tricking_fastqs = "move_fastqs_to_tricked_done.txt",
        reference_path = config['ref_genome_path']
    output:
        cnv_data = cellranger_path + cr_sample_name + "/outs/cnv_data.h5",
        cellranger_done = "cellranger_done.txt"
    shell:
        'if [ -d {params.cellranger_path}/run ] ; \
        then \
        echo cellranger directory exists;\
        else \
        mkdir {params.cellranger_path}/run;\
        fi ;\
         pushd {params.cellranger_path}/run; cellranger-dna cnv --reference={input.reference_path} --fastqs={params.fastqs_path}\
         --localmem={params.local_mem} --localcores={params.local_cores} --mempercore={params.mem_per_core}\
         --id={params.cr_sample_name} --sample={params.cr_sample_name}; ln -s "{params.cellranger_path}/run/{params.cr_sample_name}/outs/cnv_data.h5"\
         "{params.cellranger_path}/{params.cr_sample_name}/outs/cnv_data.h5"; popd; touch cellranger_done.txt'

rule secondary_analysis:
    params:
        sample_name = config['analysis_prefix'],
        output_path = config['secondary_analysis']['output_path'],
        h5_path = config['secondary_analysis']['h5_path'],
        genes_path = config['secondary_analysis']['genes_path'],
        all_genes_path = config['secondary_analysis']['all_genes_path'],
        bins = config['secondary_analysis']['bins_to_remove']
    input:
        rules.run_cellranger.output.cnv_data
    output:
        bins_genome = output_path + "/filtering/" + sample_name + "__bins_genome.tsv",
        chr_stops = output_path + "/filtering/" + sample_name + "__chr_stops.tsv",
        filtered_cnvs = output_path + "/filtering/" + sample_name + "__filtered_cnvs.tsv",
        filtered_counts = output_path + "/filtering/" + sample_name + "__filtered_counts.tsv",

        cluster_frequencies = output_path + "/clustering/" + sample_name + "__cluster_frequencies.txt",
        clustering_score = output_path + "/clustering/" + sample_name + "__clustering_score.txt",
        cluster_profile_overlapping = output_path + "/clustering/" + sample_name + "__cluster_profile_overlapping.png",
        cluster_sizes = output_path + "/clustering/" + sample_name + "__cluster_sizes.txt",
        clusters_phenograph_assignment = output_path + "/clustering/" + sample_name + "__clusters_phenograph_assignment.tsv",
        clusters_phenograph_cn_profiles = output_path + "/clustering/" + sample_name + "__clusters_phenograph_cn_profiles.tsv",
        clusters_phenograph_count_profiles = output_path + "/clustering/" + sample_name + "__clusters_phenograph_count_profiles.tsv",
        cn_cluster = output_path + "/clustering/" + sample_name + "__cn_cluster.h5",
        cn_gene_cluster = output_path + "/clustering/" + sample_name + "__cn_gene_cluster.tsv",
        cn_genes_clusters_heatmap = output_path + "/clustering/" + sample_name + "__cn_genes_clusters_heatmap.png",
        tsne_output = output_path + "/clustering/" + sample_name + "__tsne_output.png"
    run:
        sa = SecondaryAnalysis(sample_name=input.sample_name, output_path=input.output_path, h5_path=input.h5_path,\
                               genes_path=input.genes_path, all_genes_path=input.all_genes_path)
        sa.remove_tenx_genomics_artifacts(bins=input.bins)
        sa.apply_phenograph()
        sa.plot_clusters()
        sa.plot_heatmap()
        sa.create_cn_cluster_h5()

